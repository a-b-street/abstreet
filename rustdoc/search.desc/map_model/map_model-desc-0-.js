searchState.loadedDescShard("map_model", 0, "<code>map_model</code> describes the world where simulations occur. …\nOriginal direction\nA business located inside a building.\nBusinesses are categorized into one of these types.\nAreas are just used for drawing.\nFor stop signs: Can’t currently specify this! For …\nTwo lanes/roads share both endpoints, because they both …\nA building has connections to the road and sidewalk, may …\nCreate a slow-to-build but fast-to-use contraction …\nCreate a fast-to-build but slow-to-use Dijkstra-based …\nA single city (like Seattle) can be broken down into …\nAn estimated number of workers\nThis is cheaper to store than a MovementID. It simply …\nMultiple <code>Road</code>s connect but no flow of traffic interacts …\nOpposite direction, sidewalks only\nSidewalks only!\nA traffic signal consists of a sequence of Stages that …\nClassifies pedestrian and cyclist crossings. Note lots of …\nA marked zebra crossing, where pedestrians usually have …\nA raised curb\nA diagonal filter exists in an intersection. It’s …\nExtra point-of-interest\nThe type of a modal filter. Most of these don’t have …\nFlex posts, wands, cones, other “weak” forms of …\nSome kind of pedestrian-only path unassociated with a road\nOne flow of traffic forks into multiple, or multiple merge …\nAn intersection connects roads. Most have &gt;2 roads and are …\nAt least three <code>Road</code>s meet at an actual “intersection” …\nThis only applies to VehiclePathfinder; walking through …\nThe kind of traffic control present at an intersection.\nWhat kind of feature an <code>Intersection</code> actually represents. …\nSolid barrier, no gaps.\nA road segment is broken down into individual lanes, which …\nOriginal direction\nA lane is identified by its parent road and its position, …\nA <code>Road</code> ends because the road crosses the map boundary.\nRepresents changes to a map. Note this isn’t …\nA Movement groups all turns from one road to another, …\nA movement is like a turn, but with less detail – it …\nNone corresponds to the native name\nCreate a fast-to-build but slow-to-use Dijkstra-based …\nTwo lanes/roads don’t have any common endpoints\nRepresent no parking as Private(0, false).\nTwo lanes/roads share one endpoint\nRefers to a road segment between two nodes, using OSM IDs. …\nFrom some manually audited cases in Seattle, the length of …\nParking lots have some fixed capacity for cars, and are …\nWho’s asking for a path?\nOne step along a path.\nA path between two endpoints for a particular mode. This …\nFor callers needing to request paths with a variety of …\nWhen pathfinding with different <code>RoutingParams</code> is done, a …\nMapEdits are converted to this before serializing. …\nSturdier planters, with gaps.\nRepresents a specific point some distance along a lane.\n(Spots, explicitly tagged as a garage)\nFor stop signs: cars can do this without stopping. These …\n(Name, spots)\nOptions for converting RawMaps to Maps.\nAn estimated number of residents, workers\nA Road represents a segment between exactly two …\nA filter placed somewhere along a road\nTuneable parameters for all types of routing.\nThe corner where two sidewalks meet. Pedestrians can cross …\nSome kind of shared pedestrian+bicycle space. May be …\nSee https://wiki.openstreetmap.org/wiki/Forward_…\nPart of some traffic signal\nJust paint!\nNot from OSM. A user-specified area to focus on.\nA single <code>Road</code> ends because the actual roadway ends; “the …\nEither a lane or a turn, where most movement happens.\nA Turn leads from the end of one Lane to the start of …\nTurns are uniquely identified by their (src, dst) lanes …\nAn unmarked crossing, where pedestrians may cross without …\nNot part of a traffic signal\nMinimum is the minimum duration, 0 allows cycle to be …\nNon-road surface, between the road and footpath or within …\nFor stop signs: cars have to stop before doing this turn, …\nA contiguous set of roads with access restrictions. This …\nReturns the index where the new lane was inserted\nAll types of amenities, in alphabetical order.\nReturn the cost of a single path, and also a mapping from …\nThis and all_outgoing_borders are expensive to constantly …\nTurn restrictions for this lane. An empty set represents …\nA dummy map that won’t crash UIs, but has almost nothing …\nThis is the specific amenity listed in OSM, not the more …\nDon’t allow movements between these roads at all. Only …\nDon’t allow crossing these roads at all. Only affects …\nSome kind of modal filter or barrier this distance along …\nJust for temporary std::mem::replace tricks.\nCategorize an OSM amenity tag.\nThe physical center of the road, including sidewalks, …\nThis is meant for table-driven unit tests. Call this on …\nA stack, oldest edit is first. The same object may be …\nself is ‘from’. (via, to). Only BanTurns.\nThe two-letter ISO country code where this network exists. …\nTransforms a string describing lane types and directions, …\nSome kind of crossing this distance along center_pts.\nSorted by increasing distance\nCould be a Crosswalk or UnmarkedCrossing\nIs there a tagged crosswalk near each end of the road?\nThis must contain all crossing turns at one intersection, …\nThe individual maps\nGoes from building to sidewalk\nGoes from the lot to the driving lane\n{Cars, bikes} trying to start or end here might not be …\nGuaranteed to be at least 7m (MAX_CAR_LENGTH + a little …\nThese may be on different roads entirely, like for light …\nIf true, driving happens on the right side of the road …\nOnce a Map exists, the player can edit it in the UI …\nA transit vehicle either vanishes at its last stop or …\nExport all road and intersection geometry to GeoJSON, …\nIf we can’t render all spots (maybe a lot with no aisles …\nCars trying to park near this building should head for the …\nFinds the road directly connecting two intersections.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe inverse of <code>to_char</code>. Always picks one buffer type. …\nThe “overall” path of movement, aka, an “average” …\nFind all amenity types that at least 1 building contains\nWhat’re the names of bus routes along a road? Note this …\nIf you need to regenerate anything when the map is edited, …\nThis will return None for SharedSidewalkCorners\nNone for SharedSidewalkCorners and turns not belonging to …\nFind all movements from one road to another that’re …\nThe turns may belong to two different intersections!\nAs long as this is unique per road, this value is …\nOSM railway=rail will be included as light rail if so. …\nNote that a lane may belong to both incoming_lanes and …\nSince the player is in the middle of editing, the signal …\nIf true, roads without explicitly tagged sidewalks may be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the lane is part of the roadway, the …\nDetermines if the lane is a travel lane that is …\nIf false, only buses serve this stop\nDoes a turn at a stop sign go from a smaller to a larger …\nPreserve all OSM tags for buildings, increasing the final …\nNormally after applying edits, you must call …\nWhere a text label should be centered to have the best …\nInvariant: A road must contain at least one child. These …\nLoad a map from a local serialized Map or RawMap. Note …\nWhen crossing an arterial or highway road, multiply the …\nSee …\nA bunch of (mostly read-only) queries on a Map.\nAfter deserializing a map directly, call this after.\nReturns the highest elevation in the map\nWas a short road adjacent to this intersection merged?\nModifies the map in-place, removing parts not essential …\nModifies the map in-place, removing buildings.\nThere’s either a modal filter on this road or not\nReturns (changed_roads, deleted_lanes, deleted_turns, …\nPublic for importer. Do not abuse!\nNone if bidirectional. If it’s one-way, which direction …\nRelated to <code>avoid_roads</code>, but used as an optimization in map …\nExplicitly store whatever the original was, since this can…\nDerived from commands, kept up to date by update_derived\nUseful utilities for working with OpenStreetMap.\nThe importing process also automatically creates some …\nDepending on options while importing, these might be …\nDepending on options while importing, these might be …\nEverything related to pathfinding through a map for …\n[-1.0, 1.0] theoretically, but in practice, about [-0.25, …\nThis needs to be in clockwise orientation, or later …\nEdits without these are player generated.\nSome edits are included in the game by default, in …\nThe link is optional even for proposals\nThis can expensive, so don’t constantly do it while …\nOnly roads incoming to the intersection are listed here.\nReturns the routing params baked into the map.\nAdjusts the routing params baked into the map by …\nLot to sidewalk\nThe building’s connection for any agent can change based …\nSimple search along undirected roads. Expresses the result …\nSimple search along directed roads, weighted by distance. …\nShould contraction hierarchies for pathfinding be built? …\nNon-empty, times in order for one day when a vehicle …\nThe middle of the “T”, pointing towards the parking …\nsrc and dst must both belong to parent. No guarantees that …\nA transit vehicle spawns at the beginning of this lane. …\nStreet parking is divided into spots of this length. 8 …\nRepresents the lane type as a single character, for use in …\nEncode the edits in a permanent format, referring to …\nConvert the driving lanes of a road between one-way …\nThe most significant class of traffic that travels in this …\nMeaningless order\nWhatever edits have been applied, treat as the basemap. …\nIf true, turns on red which do not conflict crossing …\nself is ‘from’\nPick a reasonable default for a lane width, without any …\nFor a given lane type, returns some likely widths. This …\nLike center_pts, but before any trimming for intersection …\nA single city (like Seattle) can be broken down into …\nThe individual maps\nIf there’s a single map covering all the smaller maps, …\nGenerate a city from a bunch of smaller, individual maps. …\nfalse is src_i, true is dst_i\nStarting from some initial spot, calculate the cost to all …\nStarting from some initial buildings, calculate the cost …\nIf true, allow walking on shoulders.\nCalculate the strongly connected components (SCC) of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis returns the pathfinding cost of crossing one road and …\nStarting from some initial buildings, calculate the cost …\nIf true, allow walking on shoulders.\nRepresents changes to a map. Note this isn’t …\nPick apart changed_roads and figure out if an entire road …\nA stack, oldest edit is first. The same object may be …\nAssumes update_derived has been called.\nThis must contain all crossing turns at one intersection, …\n(summary, details)\nProduces an md5sum of the contents of the edits.\nGet the human-friendly of these edits. If they have a …\nLoad map edits from the given JSON bytes. Strip out any …\nLoad map edits from a JSON file. Strip out any commands …\nDerived from commands, kept up to date by update_derived\nA representation of traffic signal configuration that …\nSome edits are included in the game by default, in …\nRecalculate the driveways of some buildings after map …\nRecalculate the driveways of some parking lots after map …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen the PermanentMapEdits format changes, add a …\nMapEdits are converted to this before serializing. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the human-friendly of these edits. If they have a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform permanent edits to MapEdits, looking up the map …\nTransform permanent edits to MapEdits, looking up the map …\nEdits without these are player generated.\nThe link is optional even for proposals\nA road segment connecting two intersections, and a …\nA fixed number of seconds.\nA plan describes how a traffic signal is configured during …\nA traffic signal is in one stage at any time. The stage …\nHow long a stage lasts before moving to the next one.\nA movement through an intersection.\nMinimum, Delay, Additional Minimum is the minimum cycle …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe movement begins at the end of this road segment.\nThe ID of the OSM node representing the intersection with …\nThe ID of the OSM node representing the intersection. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue iff the movement is along a crosswalk. Note that …\nThe direction along the road segment. See …\nRelative to a central clock, delay the first stage by this …\nThe ID of the OSM node at the start of this road segment.\nThe ID of the OSM node at the end of this road segment.\nThe ID of the OSM way representing the road.\nDuring this stage, these turns can be performed after …\nThe traffic signal uses configuration from one plan at a …\nDuring this stage, these turns can be performed with the …\nThe stage lasts this long before moving to the next one.\nThe traffic signal repeatedly cycles through these stages. …\nThis plan takes effect at this local time, measured in …\nThe movement ends at the beginning of this road segment.\nOptions for converting RawMaps to Maps.\nPreserve all OSM tags for buildings, increasing the final …\nSnap points to an exact Position along the nearest lane. …\nShould contraction hierarchies for pathfinding be built? …\nThe various traffic signal generators live in the traffic …\nAdjust the path to start on the polygon’s border, not …\nLook for roads underneath bridges, then lower their …\nFinalize importing of buildings, mostly by matching them …\nTake in parking lots from OSM and all parking aisle roads. …\nReturns (driveway_line, driving_pos, sidewalk_line, …\nApplies a bunch of heuristics to a single intersection, …\nSimple second-pass after generating all signals. Find …\nCreate a traffic signal which has a stage that is: …\nBuild stages. First find roads that are straight across, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate all driving and walking turns at an intersection, …\nIdeally, we want every incoming lane to lead to at least …\nFilter out crosswalks on really short roads. In reality, …\nLooks at all sidewalks (or lack thereof) in …\nPublic transit stops and routes.\nZones and AccessRestrictions are used to model things like:\nAreas are just used for drawing.\nThe importing process also automatically creates some …\nA building has connections to the road and sidewalk, may …\nAn estimated number of workers\nRepresent no parking as Private(0, false).\n(Spots, explicitly tagged as a garage)\n(Name, spots)\nAn estimated number of residents, workers\nReturns (biking position, sidewalk position). Could fail …\nGoes from building to sidewalk\nThe polyline goes from the building to the driving position\nDoes this building contain any amenity matching the …\nWhere a text label should be centered to have the best …\nDepending on options while importing, these might be …\nThe building’s connection for any agent can change based …\nAn intersection connects roads. Most have &gt;2 roads and are …\nStrict for bikes. If there are bike lanes, not allowed to …\nReturn all incoming roads to an intersection, sorted by …\nHigher numbers get drawn on top\nNote that a lane may belong to both incoming_lanes and …\nDoes this intersection connect to only a single driveable …\nIgnoring mode of travel, is this intersection only …\nDoes this intersection only connect two road segments? …\nWas a short road adjacent to this intersection merged?\nThis needs to be in clockwise orientation, or later …\nDon’t call for SharedSidewalkCorners\nTwo lanes/roads share both endpoints, because they both …\nA road segment is broken down into individual lanes, which …\nA lane is identified by its parent road and its position, …\nTwo lanes/roads don’t have any common endpoints\nTwo lanes/roads share one endpoint\nFrom some manually audited cases in Seattle, the length of …\n{Cars, bikes} trying to start or end here might not be …\npt2 will be endpoint\nReturns the set of allowed turn types, based on individual …\nThis does the reasonable thing for the leftmost and …\nA diagonal filter exists in an intersection. It’s …\nThe type of a modal filter. Most of these don’t have …\nA filter placed somewhere along a road\nThe caller must call this in a <code>before_edit</code> / …\nPhysically where is the filter placed?\nThis is cheaper to store than a MovementID. It simply …\nA Movement groups all turns from one road to another, …\nA movement is like a turn, but with less detail – it …\nCould be a Crosswalk or UnmarkedCrossing\nThe “overall” path of movement, aka, an “average” …\nPolyline points FROM intersection\nParking lots have some fixed capacity for cars, and are …\nGoes from the lot to the driving lane\nGuaranteed to be at least 7m (MAX_CAR_LENGTH + a little …\nIf we can’t render all spots (maybe a lot with no aisles …\nLot to sidewalk\nThe middle of the “T”, pointing towards the parking …\nRefers to a road segment between two nodes, using OSM IDs. …\nA Road represents a segment between exactly two …\nSee https://wiki.openstreetmap.org/wiki/Forward_…\nSome kind of modal filter or barrier this distance along …\nThe physical center of the road, including sidewalks, …\nThese are ordered from closest to center lane (left-most …\nself is ‘from’. (via, to). Only BanTurns.\nSome kind of crossing this distance along center_pts.\nSorted by increasing distance\nIs there a tagged crosswalk near each end of the road?\nlane must belong to this road. Offset 0 is the centermost …\nGet the DirectedRoadID pointing to the intersection. …\nGet the DirectedRoadID pointing from the intersection. …\nIncludes off-side\nThis is the FIRST yellow line where the direction of the …\nCreates the thick polygon representing one half of the …\nReturns all lanes located between l1 and l2, exclusive.\nDoes this directed road have any lanes of a certain type?\nA simple classification of if the directed road is …\nReturns lanes from the “center” going out\nDoes either end of this road lead nowhere for cars? …\nMany roads wind up with almost no length, due to their …\nStrict for bikes. If there are bike lanes, not allowed to …\nInvariant: A road must contain at least one child. These …\nThere’s either a modal filter on this road or not\nGet the only sidewalk or shoulder on this side of the …\nReturns the other intersection of this road, panicking if …\n[-1.0, 1.0] theoretically, but in practice, about [-0.25, …\nMeaningless order\nself is ‘from’\nLike center_pts, but before any trimming for intersection …\nGet the priority of a turn according to the stop sign – …\nOnly roads incoming to the intersection are listed here.\nA traffic signal consists of a sequence of Stages that …\nMinimum is the minimum duration, 0 allows cycle to be …\nModifies the fixed timing of all stages, applying either a …\nMove crosswalks from stages, adding them to an all-walk as …\nMove crosswalks from stages, adding them to an all-walk as …\nHow long a full cycle of the signal lasts, assuming no …\nEntry i is the path to drive to stop i. The very last …\nThese may be on different roads entirely, like for light …\nA transit vehicle either vanishes at its last stop or …\nAs long as this is unique per road, this value is …\nIf false, only buses serve this stop\nExplicitly store whatever the original was, since this can…\nNon-empty, times in order for one day when a vehicle …\nA transit vehicle spawns at the beginning of this lane. …\nFor stop signs: Can’t currently specify this! For …\nA marked zebra crossing, where pedestrians usually have …\nFor stop signs: cars can do this without stopping. These …\nThe corner where two sidewalks meet. Pedestrians can cross …\nA Turn leads from the end of one Lane to the start of …\nTurns are uniquely identified by their (src, dst) lanes …\nAn unmarked crossing, where pedestrians may cross without …\nFor stop signs: cars have to stop before doing this turn, …\nOnly appropriat for pedestrian crossings. The geometry of …\nIf this turn is a crosswalk over a single road, return …\nIs the turn a crosswalk or unmarked crossing?\nPenalties for (lane types, lane-changing, slow lane). The …\nIs this turn legal, according to turn lane tagging?\nIs this turn legal, according to turn restrictions defined …\nsrc and dst must both belong to parent. No guarantees that …\nA contiguous set of roads with access restrictions. This …\nLarger number means a bigger road, according to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWho’s asking for a path?\nTuneable parameters for all types of routing.\nDon’t allow movements between these roads at all. Only …\nDon’t allow crossing these roads at all. Only affects …\nCan an agent use a lane? There are some subtle exceptions …\nCan an agent use a road in either direction? There are …\nStrict for bikes. If there are bike lanes, not allowed to …\nNot bijective, but this is the best guess of user intent\nWhen crossing an arterial or highway road, multiply the …\nSome helpers for working with fast_paths.\nRelated to <code>avoid_roads</code>, but used as an optimization in map …\nTo deal with complicated intersections and short roads in …\nStructures related to the new road-based pathfinding …\nPathfinding for cars, bikes, buses, and trains using …\nPathfinding for pedestrians, as well as figuring out if …\nHeavily penalize crossing into an access-restricted zone …\nThis operates on raw IDs and costs; no type safety. The …\nReturns (path cost, node IDs in path)\nReturns (path cost, node IDs in path). Input is pairs of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA bidirectional mapping between fast_paths NodeId and some …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCall this after filling out the input graph, right before …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a slow-to-build but fast-to-use contraction …\nCreate a fast-to-build but slow-to-use Dijkstra-based …\nCreate a fast-to-build but slow-to-use Dijkstra-based …\nFor callers needing to request paths with a variety of …\nWhen pathfinding with different <code>RoutingParams</code> is done, a …\nQuickly create an invalid pathfinder, just to make borrow …\nCreate a new Pathfinder with custom routing params that …\nCreate a new Pathfinder with custom routing params that …\nCreate a new Pathfinder with custom routing params that …\nFinds a path from a start to an end for a certain type of …\nFinds a path from a start to an end for a certain type of …\nNew pathfinders will be created as-needed using Dijkstra’…\nFinds a path from a start to an end for a certain type of …\nThis only applies to VehiclePathfinder; walking through …\nA sequence of movements through a cluster of …\nFind all other traffic signals “close” to one. Ignore …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGroup lane-based uber-turns into road-based UberTurnV2s.\n(legal, illegal)\nSidewalks only!\nOriginal direction\nDetermines the start and end position to travel between …\nCreate a request from the beginning of one road to the end …\nGroup similar requests together, returning the number of …\nOnce we finish this PathStep, how much distance will be …\nEstimate how long following the path will take in the best …\nIf the agent following this path will initially block some …\nThe original PathRequest used to produce this path. If the …\nReturns the total elevation (gain, loss) experienced over …\nThe caller must pass in two valid positions for the …\nThe single definitive place to determine how fast somebody …\nThe single definitive place to determine how fast somebody …\nTrusting the caller to do this in valid ways.\nTraces along the path from its originally requested start. …\nTraces along the path from a specified distance along the …\nDraws the thickened path, matching entire roads. Ignores …\nThe caller must pass in two valid positions for the …\nThe caller must pass in two valid sidewalk positions. This …\nOriginal direction\nOpposite direction, sidewalks only\nOne step along a path.\nA path between two endpoints for a particular mode. This …\nEstimate how long following the path will take in the best …\nVehicle implementations often just calculate the sequence …\nThe time needed to perform this path. This time is not a …\nThe original PathRequest used to produce this path.\nAll steps in this path.\nTransform a sequence of roads representing a path into the …\nReturns polygons covering the entire path. Ignores the path…\nDraws the thickened path, matching entire roads. Ignores …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis returns the pathfinding cost of crossing one road and …\nfalse is src_i, true is dst_i\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempt the pathfinding and see if we should ride public …\nRepresents a specific point some distance along a lane.\nEither a lane or a turn, where most movement happens.\nGiven a position along a lane, find the equivalent …\nReturn the center-line geometry of this lane or turn.\nThe single definitive place to determine how fast somebody …\nThe single definitive place to determine how fast somebody …")