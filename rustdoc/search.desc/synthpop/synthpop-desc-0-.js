searchState.loadedDescShard("synthpop", 0, "This crate describes a synthetic population that exist in …\nScenario name\nLists all border intersections of the map, broken down by …\nThis is an ID used by Seattle soundcast. Originally it was …\nA Scenario describes all the input to a simulation. …\nTransforms an existing Scenario before instantiating it.\nUsed for interactive spawning, tests, etc. For now, only …\nThis represents the number of vehicles (or trips, or …\nSpecifies where a trip begins or ends.\nHow does a trip primarily happen?\nLifted from Seattle’s Soundcast model, but seems general …\nSome users of the API …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\nDid a ScenarioModifier affect this?\nNone means seed all buses. Otherwise the route name must …\nJust used for debugging\nThere must be continuity between trips: each trip starts …\nBased on the classification of the connecting road, a …\nIf <code>None</code>, then just cancel the trip.\nLists all border intersections of the map, broken down by …\nReturns the (incoming, outgoing) borders for the …\nBased on the classification of the connecting road, a …\nThis represents the number of vehicles (or trips, or …\nRun pathfinding on all of the requests, then count the …\nPrint a comparison of counts. Only look at …\nUsed for interactive spawning, tests, etc. For now, only …\nSpecifies where a trip begins or ends.\nFigure out a single PathRequest that goes between two …\nReturns a point representing where this endpoint is.\nImport external scenario data. The main difference between …\nAn activity model creates “people” that follow a set …\nNeed to explain this trick – basically keeps consistency …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is a much more primitive way to randomly generate …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDesigned in …\nScenario name\nTransforms an existing Scenario before instantiating it.\nIf this modifies scenario_name, then that means prebaked …\nIf <code>None</code>, then just cancel the trip.\nA Scenario describes all the input to a simulation. …\nLifted from Seattle’s Soundcast model, but seems general …\nVerify that a person’s trips make sense\nDid a ScenarioModifier affect this?\nNone means seed all buses. Otherwise the route name must …\nJust used for debugging\nThere must be continuity between trips: each trip starts …")