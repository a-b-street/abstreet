searchState.loadedDescShard("importer", 0, "It’s assumed that the importer is run with the current …\nA specification for importing all maps in a single city.\nProduce a city overview from all of the individual maps in …\nReturn the command-line flags that should produce this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransforms a .osm.xml or .pbf file to a map in one step.\nOnly process one map. If not specified, process all maps …\nDownload all raw input files, then convert OSM to the …\nUses osmium to clip the input .osm.xml or osm.pbf against …\nGiven the path to a GeoJSON boundary polygon, return the …\nConvert the RawMap to the final Map format.\nRegenerate all maps and scenarios from scratch.\nDownload trip demand data, then produce the typical …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven the name of a map, configure its import.\nGiven the path to a GeoJSON boundary polygon, return the …\nDownload and pre-process data needed to generate Seattle …\nMatch OSM buildings to parcels, scraping the number of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform the Seattle-wide <code>Endpoints</code> into specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf the output file doesn’t already exist, downloads the …\nIf the output file doesn’t already exist, downloads the …\nCreates a RawMap from OSM and other input data.\nUses osmium to clip the input .osm.xml or osm.pbf against …\nConverts a RawMap to a Map.")