searchState.loadedDescShard("map_gui", 0, "This crate contains common code for applications that draw …\nAn application wishing to use the tools in this crate has …\nSimple app state that just renders a static map, without …\nInitially position the camera here. The format is an …\nChange the color scheme. Idempotent. Return true if there …\nThe color scheme for map elements, agents, and the UI.\nA color scheme groups colors used for different map, …\nDev mode exposes experimental tools useful for debugging, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>widgetry::State</code> that warps to the given point.\nPath to a map to initially load. If not provided, load the …\nWhen making a screen recording, enable this option to hide …\nRender static map elements.\nOverride the monitor’s auto-detected scale factor\nCustom per-app state can be stored here\nIf desired, this can be advanced to render traffic signals …\nAssorted tools and UI states that’re useful for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEven if the current map name matches, still reload.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptions controlling the UI. Some of the options are common …\nDifferent ways of drawing traffic signals. The names of …\nDraw buildings in different perspectives\nwidgetry options\nThe color scheme for map elements, agents, and the UI.\nEvery time we draw, render all agents zoomed in. Extremely …\nDev mode exposes experimental tools useful for debugging, …\nWhen time warping, don’t draw to speed up simulation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe delay threshold to halt on when jumping to the next …\nDisplay roads and buildings in an alternate language, if …\nRestore previous options. If the file is missing or the …\nWhen making a screen recording, enable this option to hide …\nDraw building driveways.\nDraw building outlines.\nDraw crosswalks and unmarked crossings.\nDraw stop signs.\nIf true, draw an icon for traffic signals both when zoomed …\nIf true, modify several basemap features to de-emphasize …\nHow much to advance the sim with one of the speed controls\nAutomatically change color_scheme based on simulation time …\nHow traffic signals should be rendered.\nHow to render geometric units\nControl how the map is drawn.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabel every building.\nDefault options for drawing a map.\nDon’t draw the current traffic signal state.\nFind sections along the intersection polygon that aren’t …\nDraws both zebra crosswalks and unmarked crossings\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnsorted, unexpanded, raw result.\nA simple variation of the one in game that shows all …\nBuild a single gigantic <code>GeomBatch</code> to render the entire map …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf <code>text_width</code> is defined, don’t draw the center line in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSimple app state that just renders a static map, without …\nInitially position the camera here. The format is an …\nThe color scheme for map elements, agents, and the UI.\nDev mode exposes experimental tools useful for debugging, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath to a map to initially load. If not provided, load the …\nWhen making a screen recording, enable this option to hide …\nOnly select buildings, and work whether zoomed in or not.\nOptions are passed in by each app, usually seeded with …\nAssumes some defaults.\nOverride the monitor’s auto-detected scale factor\nCustom per-app state can be stored here\nIf desired, this can be advanced to render traffic signals …\nRepresents the state of a widgetry Canvas.\nLets the player switch maps.\nTrack the last map used, to resume next session.\nLabels roads when unzoomed. Label size and frequency …\nDraws labels in map-space that roughly fit on the roads. …\nA 2D grid containing some arbitrary data.\nClick to add waypoints, drag them, see the list on a panel …\nCustomize the appearance and behavior of a minimap.\nExecutes a command and displays STDOUT and STDERR in a …\nA title screen shared among all of the A/B Street apps.\nSave sequences of waypoints as named trips. Basic file …\nA standard way to group a home button back to the title …\nA button to change maps, with default keybindings\nLess is better\nShorter is better\nShorter is better\nLogically represents a 2D vector. Row-major ordering.\nDraw extra stuff on the minimap, just pulling from the app.\nThresholds are Durations, in units of seconds\nReturns the path to an executable. Native-only.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDraw a goal marker pointing at something.\nMake it clear the map can’t be interacted with right now.\nIs there some additional layer displayed on the minimap? …\nShould the user be able to control the z-order visible? …\nA button to return to the title screen\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA row beneath the minimap in the zoomed view, usually used …\nWhen unzoomed, display this panel. By default, no controls …\nControls to be placed to the left to the zoomed-in panel\nCalled for <code>Outcome::Changed</code> on the panel.\nIf a button is clicked that was produced by some method in …\nDraw a start marker pointing at something.\nGeneric UI tools. Some of this should perhaps be lifted to …\nModify the current URL to set the first free parameter to …\nReturns the version of A/B Street to link to. When …\nRepresents the state of a widgetry Canvas.\nTrack the last map used, to resume next session.\nLoad the camera’s configuration for the specified map. …\nSave the camera’s configuration for the specified map, …\nLets the player switch maps.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutes a command and displays STDOUT and STDERR in a …\nStart with the relative layer if anything has changed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf a button owned by this was clicked, returns the new …\nIf clickable_roads was enabled and a road was clicked, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA 2D grid containing some arbitrary data.\nLogically represents a 2D vector. Row-major ordering.\nThresholds are Durations, in units of seconds\nCalculate the index from a given (x, y). Doesn’t do any …\nFrom one tile, calculate the 4 orthogonal neighbors. …\nThe inverse of <code>idx</code>. No bounds checking.\nDraw a goal marker pointing at something.\nDraw a start marker pointing at something.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLabels roads when unzoomed. Label size and frequency …\nDraws labels in map-space that roughly fit on the roads. …\nLabel roads that the predicate approves\nLabel roads that the predicate approves\nOnly label major roads\nOnly label major roads\nCustomize the appearance and behavior of a minimap.\nDraw extra stuff on the minimap, just pulling from the app.\nIs there some additional layer displayed on the minimap? …\nShould the user be able to control the z-order visible? …\nA row beneath the minimap in the zoomed view, usually used …\nWhen unzoomed, display this panel. By default, no controls …\nControls to be placed to the left to the zoomed-in panel\nCalled for <code>Outcome::Changed</code> on the panel.\nIf a button is clicked that was produced by some method in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the polygon is modified\nReturns the argument unchanged.\nReturns the argument unchanged.\nCould fail if the user edits the ring and makes it invalid\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA title screen shared among all of the A/B Street apps.\nRun the given executable with some arguments. On Mac and …\nThe build time in RFC2822, UTC.\nThe endianness, given by <code>CARGO_CFG_TARGET_ENDIAN</code>.\nThe toolchain-environment, given by <code>CARGO_CFG_TARGET_ENV</code>.\nThe OS-family, given by <code>CARGO_CFG_TARGET_FAMILY</code>.\nThe operating system, given by <code>CARGO_CFG_TARGET_OS</code>.\nThe pointer width, given by <code>CARGO_CFG_TARGET_POINTER_WIDTH</code>.\nThe target architecture, given by <code>CARGO_CFG_TARGET_ARCH</code>.\nThe Continuous Integration platform detected during …\nValue of DEBUG for the profile used during compilation.\nThe features that were enabled during compilation.\nThe features as above, as lowercase strings.\nThe feature-string as above, from lowercase strings.\nThe features as a comma-separated string.\nThe host triple of the rust compiler.\nThe parallelism that was specified during compilation.\nValue of OPT_LEVEL for the profile used during compilation.\nA colon-separated list of authors.\nThe description.\nThe homepage.\nThe license.\nThe name of the package.\nThe source repository as advertised in Cargo.toml.\nThe full version.\nThe major version.\nThe minor version.\nThe patch version.\nThe pre-release version.\n<code>release</code> for release builds, <code>debug</code> for other builds.\nThe compiler that cargo resolved to use.\nThe output of …\nThe documentation generator that cargo resolved to use.\nThe output of …\nThe target triple that was being compiled for.\nSave sequences of waypoints as named trips. Basic file …\nsaves iff current trip is changed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLess is better\nShorter is better\nShorter is better\nClick to add waypoints, drag them, see the list on a panel …\nIf the outcome from the panel or world isn’t used by the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllows any number of waypoints\nOnly allow drawing routes with 2 waypoints. If a route is …\nThe caller should call <code>rebuild_world</code> after this\nThe caller is responsible for calling <code>initialize_hover</code> and …")