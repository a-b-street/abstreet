(function() {
    var type_impls = Object.fromEntries([["fifteen_min",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AppLike-for-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-AppLike-for-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; AppLike for SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>(&amp;self) -&gt; &amp;Map</h4></section><section id=\"method.cs\" class=\"method trait-impl\"><a href=\"#method.cs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cs</a>(&amp;self) -&gt; &amp;ColorScheme</h4></section><section id=\"method.mut_cs\" class=\"method trait-impl\"><a href=\"#method.mut_cs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_cs</a>(&amp;mut self) -&gt; &amp;mut ColorScheme</h4></section><section id=\"method.draw_map\" class=\"method trait-impl\"><a href=\"#method.draw_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_map</a>(&amp;self) -&gt; &amp;DrawMap</h4></section><section id=\"method.mut_draw_map\" class=\"method trait-impl\"><a href=\"#method.mut_draw_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_draw_map</a>(&amp;mut self) -&gt; &amp;mut DrawMap</h4></section><section id=\"method.opts\" class=\"method trait-impl\"><a href=\"#method.opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">opts</a>(&amp;self) -&gt; &amp;Options</h4></section><section id=\"method.mut_opts\" class=\"method trait-impl\"><a href=\"#method.mut_opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_opts</a>(&amp;mut self) -&gt; &amp;mut Options</h4></section><section id=\"method.map_switched\" class=\"method trait-impl\"><a href=\"#method.map_switched\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_switched</a>(\n    &amp;mut self,\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    map: Map,\n    timer: &amp;mut Timer&lt;'_&gt;,\n)</h4></section><section id=\"method.draw_with_opts\" class=\"method trait-impl\"><a href=\"#method.draw_with_opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_with_opts</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;, opts: DrawOptions)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_warper\" class=\"method trait-impl\"><a href=\"#method.make_warper\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">make_warper</a>(\n    &amp;mut self,\n    ctx: &amp;EventCtx&lt;'_&gt;,\n    pt: Pt2D,\n    target_cam_zoom: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.f64.html\">f64</a>&gt;,\n    _: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Create a <code>widgetry::State</code> that warps to the given point.</div></details><section id=\"method.sim_time\" class=\"method trait-impl\"><a href=\"#method.sim_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sim_time</a>(&amp;self) -&gt; Time</h4></section><section id=\"method.current_stage_and_remaining_time\" class=\"method trait-impl\"><a href=\"#method.current_stage_and_remaining_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">current_stage_and_remaining_time</a>(\n    &amp;self,\n    id: IntersectionID,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.usize.html\">usize</a>, Duration)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.change_color_scheme\" class=\"method trait-impl\"><a href=\"#method.change_color_scheme\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">change_color_scheme</a>(\n    &amp;mut self,\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    cs: ColorSchemeChoice,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Change the color scheme. Idempotent. Return true if there was a change.</div></details></div></details>","AppLike","fifteen_min::App"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SharedAppState-for-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-SharedAppState-for-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SharedAppState for SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_default\" class=\"method trait-impl\"><a href=\"#method.draw_default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_default</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;)</h4></section></summary><div class='docblock'>When DrawBaselayer::DefaultDraw is called, run this.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dump_before_abort\" class=\"method trait-impl\"><a href=\"#method.dump_before_abort\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">dump_before_abort</a>(&amp;self, canvas: &amp;Canvas)</h4></section></summary><div class='docblock'>Will be called if <code>State::event</code> or <code>State::draw</code> panics.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_quit\" class=\"method trait-impl\"><a href=\"#method.before_quit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before_quit</a>(&amp;self, canvas: &amp;Canvas)</h4></section></summary><div class='docblock'>Called before a normal exit, like window close</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free_memory\" class=\"method trait-impl\"><a href=\"#method.free_memory\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">free_memory</a>(&amp;mut self)</h4></section></summary><div class='docblock'>If widgetry determines the video card is low on memory, this may be called. The application\nshould make its best effort to delete any unused Drawables.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_event\" class=\"method trait-impl\"><a href=\"#method.before_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before_event</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Before <code>State::event</code> is called, call this.</div></details></div></details>","SharedAppState","fifteen_min::App"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>&lt;F&gt;(\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    opts: Options,\n    map_name: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MapName&gt;,\n    cam: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    session: T,\n    init_states: F,\n) -&gt; (SimpleApp&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;&gt;)<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;mut EventCtx&lt;'_&gt;, &amp;mut SimpleApp&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;&gt;,</div></h4></section><section id=\"method.draw_unzoomed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">draw_unzoomed</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;)</h4></section><section id=\"method.draw_zoomed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">draw_zoomed</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;, opts: DrawOptions)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.recalculate_current_selection\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">recalculate_current_selection</a>(&amp;mut self, ctx: &amp;EventCtx&lt;'_&gt;)</h4></section></summary><div class=\"docblock\"><p>Assumes some defaults.</p>\n</div></details><section id=\"method.mouseover_unzoomed_roads_and_intersections\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mouseover_unzoomed_roads_and_intersections</a>(\n    &amp;self,\n    ctx: &amp;EventCtx&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.mouseover_unzoomed_buildings\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mouseover_unzoomed_buildings</a>(&amp;self, ctx: &amp;EventCtx&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;</h4></section></summary><div class=\"docblock\"><p>Only select buildings, and work whether zoomed in or not.</p>\n</div></details></div></details>",0,"fifteen_min::App"]]],["osm_viewer",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AppLike-for-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-AppLike-for-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; AppLike for SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>(&amp;self) -&gt; &amp;Map</h4></section><section id=\"method.cs\" class=\"method trait-impl\"><a href=\"#method.cs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cs</a>(&amp;self) -&gt; &amp;ColorScheme</h4></section><section id=\"method.mut_cs\" class=\"method trait-impl\"><a href=\"#method.mut_cs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_cs</a>(&amp;mut self) -&gt; &amp;mut ColorScheme</h4></section><section id=\"method.draw_map\" class=\"method trait-impl\"><a href=\"#method.draw_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_map</a>(&amp;self) -&gt; &amp;DrawMap</h4></section><section id=\"method.mut_draw_map\" class=\"method trait-impl\"><a href=\"#method.mut_draw_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_draw_map</a>(&amp;mut self) -&gt; &amp;mut DrawMap</h4></section><section id=\"method.opts\" class=\"method trait-impl\"><a href=\"#method.opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">opts</a>(&amp;self) -&gt; &amp;Options</h4></section><section id=\"method.mut_opts\" class=\"method trait-impl\"><a href=\"#method.mut_opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_opts</a>(&amp;mut self) -&gt; &amp;mut Options</h4></section><section id=\"method.map_switched\" class=\"method trait-impl\"><a href=\"#method.map_switched\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_switched</a>(\n    &amp;mut self,\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    map: Map,\n    timer: &amp;mut Timer&lt;'_&gt;,\n)</h4></section><section id=\"method.draw_with_opts\" class=\"method trait-impl\"><a href=\"#method.draw_with_opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_with_opts</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;, opts: DrawOptions)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_warper\" class=\"method trait-impl\"><a href=\"#method.make_warper\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">make_warper</a>(\n    &amp;mut self,\n    ctx: &amp;EventCtx&lt;'_&gt;,\n    pt: Pt2D,\n    target_cam_zoom: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.f64.html\">f64</a>&gt;,\n    _: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Create a <code>widgetry::State</code> that warps to the given point.</div></details><section id=\"method.sim_time\" class=\"method trait-impl\"><a href=\"#method.sim_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sim_time</a>(&amp;self) -&gt; Time</h4></section><section id=\"method.current_stage_and_remaining_time\" class=\"method trait-impl\"><a href=\"#method.current_stage_and_remaining_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">current_stage_and_remaining_time</a>(\n    &amp;self,\n    id: IntersectionID,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.usize.html\">usize</a>, Duration)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.change_color_scheme\" class=\"method trait-impl\"><a href=\"#method.change_color_scheme\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">change_color_scheme</a>(\n    &amp;mut self,\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    cs: ColorSchemeChoice,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Change the color scheme. Idempotent. Return true if there was a change.</div></details></div></details>","AppLike","osm_viewer::viewer::App"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SharedAppState-for-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-SharedAppState-for-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SharedAppState for SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_default\" class=\"method trait-impl\"><a href=\"#method.draw_default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_default</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;)</h4></section></summary><div class='docblock'>When DrawBaselayer::DefaultDraw is called, run this.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dump_before_abort\" class=\"method trait-impl\"><a href=\"#method.dump_before_abort\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">dump_before_abort</a>(&amp;self, canvas: &amp;Canvas)</h4></section></summary><div class='docblock'>Will be called if <code>State::event</code> or <code>State::draw</code> panics.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_quit\" class=\"method trait-impl\"><a href=\"#method.before_quit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before_quit</a>(&amp;self, canvas: &amp;Canvas)</h4></section></summary><div class='docblock'>Called before a normal exit, like window close</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free_memory\" class=\"method trait-impl\"><a href=\"#method.free_memory\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">free_memory</a>(&amp;mut self)</h4></section></summary><div class='docblock'>If widgetry determines the video card is low on memory, this may be called. The application\nshould make its best effort to delete any unused Drawables.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_event\" class=\"method trait-impl\"><a href=\"#method.before_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before_event</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Before <code>State::event</code> is called, call this.</div></details></div></details>","SharedAppState","osm_viewer::viewer::App"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>&lt;F&gt;(\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    opts: Options,\n    map_name: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MapName&gt;,\n    cam: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    session: T,\n    init_states: F,\n) -&gt; (SimpleApp&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;&gt;)<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;mut EventCtx&lt;'_&gt;, &amp;mut SimpleApp&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;&gt;,</div></h4></section><section id=\"method.draw_unzoomed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">draw_unzoomed</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;)</h4></section><section id=\"method.draw_zoomed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">draw_zoomed</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;, opts: DrawOptions)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.recalculate_current_selection\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">recalculate_current_selection</a>(&amp;mut self, ctx: &amp;EventCtx&lt;'_&gt;)</h4></section></summary><div class=\"docblock\"><p>Assumes some defaults.</p>\n</div></details><section id=\"method.mouseover_unzoomed_roads_and_intersections\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mouseover_unzoomed_roads_and_intersections</a>(\n    &amp;self,\n    ctx: &amp;EventCtx&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.mouseover_unzoomed_buildings\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mouseover_unzoomed_buildings</a>(&amp;self, ctx: &amp;EventCtx&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;</h4></section></summary><div class=\"docblock\"><p>Only select buildings, and work whether zoomed in or not.</p>\n</div></details></div></details>",0,"osm_viewer::viewer::App"]]],["parking_mapper",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AppLike-for-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-AppLike-for-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; AppLike for SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>(&amp;self) -&gt; &amp;Map</h4></section><section id=\"method.cs\" class=\"method trait-impl\"><a href=\"#method.cs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cs</a>(&amp;self) -&gt; &amp;ColorScheme</h4></section><section id=\"method.mut_cs\" class=\"method trait-impl\"><a href=\"#method.mut_cs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_cs</a>(&amp;mut self) -&gt; &amp;mut ColorScheme</h4></section><section id=\"method.draw_map\" class=\"method trait-impl\"><a href=\"#method.draw_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_map</a>(&amp;self) -&gt; &amp;DrawMap</h4></section><section id=\"method.mut_draw_map\" class=\"method trait-impl\"><a href=\"#method.mut_draw_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_draw_map</a>(&amp;mut self) -&gt; &amp;mut DrawMap</h4></section><section id=\"method.opts\" class=\"method trait-impl\"><a href=\"#method.opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">opts</a>(&amp;self) -&gt; &amp;Options</h4></section><section id=\"method.mut_opts\" class=\"method trait-impl\"><a href=\"#method.mut_opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_opts</a>(&amp;mut self) -&gt; &amp;mut Options</h4></section><section id=\"method.map_switched\" class=\"method trait-impl\"><a href=\"#method.map_switched\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_switched</a>(\n    &amp;mut self,\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    map: Map,\n    timer: &amp;mut Timer&lt;'_&gt;,\n)</h4></section><section id=\"method.draw_with_opts\" class=\"method trait-impl\"><a href=\"#method.draw_with_opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_with_opts</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;, opts: DrawOptions)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_warper\" class=\"method trait-impl\"><a href=\"#method.make_warper\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">make_warper</a>(\n    &amp;mut self,\n    ctx: &amp;EventCtx&lt;'_&gt;,\n    pt: Pt2D,\n    target_cam_zoom: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.f64.html\">f64</a>&gt;,\n    _: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Create a <code>widgetry::State</code> that warps to the given point.</div></details><section id=\"method.sim_time\" class=\"method trait-impl\"><a href=\"#method.sim_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sim_time</a>(&amp;self) -&gt; Time</h4></section><section id=\"method.current_stage_and_remaining_time\" class=\"method trait-impl\"><a href=\"#method.current_stage_and_remaining_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">current_stage_and_remaining_time</a>(\n    &amp;self,\n    id: IntersectionID,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.usize.html\">usize</a>, Duration)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.change_color_scheme\" class=\"method trait-impl\"><a href=\"#method.change_color_scheme\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">change_color_scheme</a>(\n    &amp;mut self,\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    cs: ColorSchemeChoice,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Change the color scheme. Idempotent. Return true if there was a change.</div></details></div></details>","AppLike","parking_mapper::mapper::App"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SharedAppState-for-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-SharedAppState-for-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SharedAppState for SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_default\" class=\"method trait-impl\"><a href=\"#method.draw_default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_default</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;)</h4></section></summary><div class='docblock'>When DrawBaselayer::DefaultDraw is called, run this.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dump_before_abort\" class=\"method trait-impl\"><a href=\"#method.dump_before_abort\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">dump_before_abort</a>(&amp;self, canvas: &amp;Canvas)</h4></section></summary><div class='docblock'>Will be called if <code>State::event</code> or <code>State::draw</code> panics.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_quit\" class=\"method trait-impl\"><a href=\"#method.before_quit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before_quit</a>(&amp;self, canvas: &amp;Canvas)</h4></section></summary><div class='docblock'>Called before a normal exit, like window close</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free_memory\" class=\"method trait-impl\"><a href=\"#method.free_memory\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">free_memory</a>(&amp;mut self)</h4></section></summary><div class='docblock'>If widgetry determines the video card is low on memory, this may be called. The application\nshould make its best effort to delete any unused Drawables.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_event\" class=\"method trait-impl\"><a href=\"#method.before_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before_event</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Before <code>State::event</code> is called, call this.</div></details></div></details>","SharedAppState","parking_mapper::mapper::App"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>&lt;F&gt;(\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    opts: Options,\n    map_name: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MapName&gt;,\n    cam: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    session: T,\n    init_states: F,\n) -&gt; (SimpleApp&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;&gt;)<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;mut EventCtx&lt;'_&gt;, &amp;mut SimpleApp&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;&gt;,</div></h4></section><section id=\"method.draw_unzoomed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">draw_unzoomed</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;)</h4></section><section id=\"method.draw_zoomed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">draw_zoomed</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;, opts: DrawOptions)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.recalculate_current_selection\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">recalculate_current_selection</a>(&amp;mut self, ctx: &amp;EventCtx&lt;'_&gt;)</h4></section></summary><div class=\"docblock\"><p>Assumes some defaults.</p>\n</div></details><section id=\"method.mouseover_unzoomed_roads_and_intersections\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mouseover_unzoomed_roads_and_intersections</a>(\n    &amp;self,\n    ctx: &amp;EventCtx&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.mouseover_unzoomed_buildings\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mouseover_unzoomed_buildings</a>(&amp;self, ctx: &amp;EventCtx&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;</h4></section></summary><div class=\"docblock\"><p>Only select buildings, and work whether zoomed in or not.</p>\n</div></details></div></details>",0,"parking_mapper::mapper::App"]]],["santa",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AppLike-for-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-AppLike-for-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; AppLike for SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>(&amp;self) -&gt; &amp;Map</h4></section><section id=\"method.cs\" class=\"method trait-impl\"><a href=\"#method.cs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cs</a>(&amp;self) -&gt; &amp;ColorScheme</h4></section><section id=\"method.mut_cs\" class=\"method trait-impl\"><a href=\"#method.mut_cs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_cs</a>(&amp;mut self) -&gt; &amp;mut ColorScheme</h4></section><section id=\"method.draw_map\" class=\"method trait-impl\"><a href=\"#method.draw_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_map</a>(&amp;self) -&gt; &amp;DrawMap</h4></section><section id=\"method.mut_draw_map\" class=\"method trait-impl\"><a href=\"#method.mut_draw_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_draw_map</a>(&amp;mut self) -&gt; &amp;mut DrawMap</h4></section><section id=\"method.opts\" class=\"method trait-impl\"><a href=\"#method.opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">opts</a>(&amp;self) -&gt; &amp;Options</h4></section><section id=\"method.mut_opts\" class=\"method trait-impl\"><a href=\"#method.mut_opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_opts</a>(&amp;mut self) -&gt; &amp;mut Options</h4></section><section id=\"method.map_switched\" class=\"method trait-impl\"><a href=\"#method.map_switched\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_switched</a>(\n    &amp;mut self,\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    map: Map,\n    timer: &amp;mut Timer&lt;'_&gt;,\n)</h4></section><section id=\"method.draw_with_opts\" class=\"method trait-impl\"><a href=\"#method.draw_with_opts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_with_opts</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;, opts: DrawOptions)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_warper\" class=\"method trait-impl\"><a href=\"#method.make_warper\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">make_warper</a>(\n    &amp;mut self,\n    ctx: &amp;EventCtx&lt;'_&gt;,\n    pt: Pt2D,\n    target_cam_zoom: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.f64.html\">f64</a>&gt;,\n    _: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Create a <code>widgetry::State</code> that warps to the given point.</div></details><section id=\"method.sim_time\" class=\"method trait-impl\"><a href=\"#method.sim_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sim_time</a>(&amp;self) -&gt; Time</h4></section><section id=\"method.current_stage_and_remaining_time\" class=\"method trait-impl\"><a href=\"#method.current_stage_and_remaining_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">current_stage_and_remaining_time</a>(\n    &amp;self,\n    id: IntersectionID,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.usize.html\">usize</a>, Duration)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.change_color_scheme\" class=\"method trait-impl\"><a href=\"#method.change_color_scheme\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">change_color_scheme</a>(\n    &amp;mut self,\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    cs: ColorSchemeChoice,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Change the color scheme. Idempotent. Return true if there was a change.</div></details></div></details>","AppLike","santa::App"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SharedAppState-for-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-SharedAppState-for-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SharedAppState for SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_default\" class=\"method trait-impl\"><a href=\"#method.draw_default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">draw_default</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;)</h4></section></summary><div class='docblock'>When DrawBaselayer::DefaultDraw is called, run this.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dump_before_abort\" class=\"method trait-impl\"><a href=\"#method.dump_before_abort\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">dump_before_abort</a>(&amp;self, canvas: &amp;Canvas)</h4></section></summary><div class='docblock'>Will be called if <code>State::event</code> or <code>State::draw</code> panics.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_quit\" class=\"method trait-impl\"><a href=\"#method.before_quit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before_quit</a>(&amp;self, canvas: &amp;Canvas)</h4></section></summary><div class='docblock'>Called before a normal exit, like window close</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free_memory\" class=\"method trait-impl\"><a href=\"#method.free_memory\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">free_memory</a>(&amp;mut self)</h4></section></summary><div class='docblock'>If widgetry determines the video card is low on memory, this may be called. The application\nshould make its best effort to delete any unused Drawables.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_event\" class=\"method trait-impl\"><a href=\"#method.before_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before_event</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Before <code>State::event</code> is called, call this.</div></details></div></details>","SharedAppState","santa::App"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimpleApp%3CT%3E\" class=\"impl\"><a href=\"#impl-SimpleApp%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SimpleApp&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>&lt;F&gt;(\n    ctx: &amp;mut EventCtx&lt;'_&gt;,\n    opts: Options,\n    map_name: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MapName&gt;,\n    cam: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    session: T,\n    init_states: F,\n) -&gt; (SimpleApp&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;&gt;)<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;mut EventCtx&lt;'_&gt;, &amp;mut SimpleApp&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn State&lt;SimpleApp&lt;T&gt;&gt;&gt;&gt;,</div></h4></section><section id=\"method.draw_unzoomed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">draw_unzoomed</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;)</h4></section><section id=\"method.draw_zoomed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">draw_zoomed</a>(&amp;self, g: &amp;mut GfxCtx&lt;'_&gt;, opts: DrawOptions)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.recalculate_current_selection\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">recalculate_current_selection</a>(&amp;mut self, ctx: &amp;EventCtx&lt;'_&gt;)</h4></section></summary><div class=\"docblock\"><p>Assumes some defaults.</p>\n</div></details><section id=\"method.mouseover_unzoomed_roads_and_intersections\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mouseover_unzoomed_roads_and_intersections</a>(\n    &amp;self,\n    ctx: &amp;EventCtx&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.mouseover_unzoomed_buildings\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mouseover_unzoomed_buildings</a>(&amp;self, ctx: &amp;EventCtx&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ID&gt;</h4></section></summary><div class=\"docblock\"><p>Only select buildings, and work whether zoomed in or not.</p>\n</div></details></div></details>",0,"santa::App"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[10809,10830,10846,10786]}